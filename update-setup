#!/usr/bin/perl
# -*- perl -*-

$ftptop = "/sourceware/ftp/anonftp/pub/cygwin";
$setupdirs = "contrib latest";
$tmpfile = "/tmp/setup.ini.tmp";

open (TMPFILE, ">$tmpfile");
select (TMPFILE);

chdir $ftptop;

$setup_version = '';
open (S, "setup.exe");
while (<S>) {
    if (/%%% setup-version (\S+)/) {
	$setup_version = $1;
	break;
    }
}
close S;

open (F, "find $setupdirs -name '*.tar.gz' -print |");

while (<F>) {
    $file = $_;
    $file =~ s/[\r\n]+$//;
    ($subdir, $package) = $file =~ m@(.*)/(.*).tar.gz@;
    $src = '';
    if ($package =~ /-src$/) {
	$package =~ s/-src$//;
	$src = 'src';
    }
    $version = "-";
    if ($package =~ /-[0-9]/) {
	($package, $version) = $package =~ m@(.*?)-([0-9].*)@;
    }

    #print "p=$package v=$version f=$file\n";
    if (!$saw_version{"$package $version"}) {
	$versions{$package} .= " " if $versions{$package};
	$versions{$package} .= $version;
	$saw_version{"$package $version"} = 1;
    }
    if ($src) {
	$source{"$package $version"} = $file;
    } else {
	$install{"$package $version"} = $file;
    }
}

close (F);

sub vsort {
    my ($a,$b) = @_;
    $a =~ s/(\d+)/sprintf("%08d", $1)/ge;
    $b =~ s/(\d+)/sprintf("%08d", $1)/ge;
    return $a cmp $b;
}

# for $v (sort {&vsort($a,$b)} keys %versions) {

sub one_file {
    my ($leader, $file) = @_;
    return unless $file;
    $sz = (stat($file))[7];
    print $leader, $file, " ", $sz, "\n";
}

print <<EOF;
# This file is automatically generated.  If you edit it, your
# edits will be discarded next time the file is generated.
# See http://sources.redhat.com/cygwin/setup.html for details.
#
EOF

$now = time;
print "setup-timestamp: $now\n";
print "setup-version: $setup_version\n" if $setup_version;
print "\n";

sub push_version {
    my ($best, $next, $v) = @_;
    #print "push_versions $p $v\n";
    if (&vsort($type{"$p $best"}, $v) < 0) {
	$old = $type{"$p $best"};
	$type{"$p $best"} = $v;
	$v = $old;
    }
    if (&vsort($type{"$p $next"}, $v) < 0) {
	$type{"$p $next"} = $v;
    }
}

for $p (sort keys %versions) {
    for $v (split(' ', $versions{$p})) {
	if ($v =~ /\d\d\d\d\d\d/) {
	    &push_version("test", "junk", $v);
	} else {
	    &push_version("curr", "prev", $v);
	}
    }
}

# Now look for overrides
open (F, "find $setupdirs -name setup.hint -print |");
while (<F>) {
    s/[\r\n]+$//;
    ($package) = m@.*/(.*)/setup\.hint$@;
    %tmp = ();
    $valid = 0;

    open (S, $_);
    while (<S>) {
	s/[\r\n]+$//;
	($type, $version) = split(' ', $_, 2);
	if ($saw_version{"$package $version"}
	    && $type =~ /^(prev|curr|test)$/) {
	    $tmp{$type} = $version;
	    $valid = 1;
	}
	if ($type eq "skip") {
	    $skip{$package} = 1;
	}
	if ($type eq "sdesc") {
	    $sdesc{$package} = $version;
	}
	if ($type eq "ldesc") {
	    $ldesc{$package} = $version;
	}
    }
    close (S);

    if ($valid) {
	undef $type{"$package prev"};
	undef $type{"$package curr"};
	undef $type{"$package test"};
	for $t (keys %tmp) {
	    $v = $tmp{$t};
	    $type{"$package $t"} = $v;
	}
    }
}

sub one_version {
    my ($print, $type) = @_;
    $v = $type{"$p $type"};
    if ($install{"$p $v"} || $source{"$p $v"}) {
	print $print;
	print "version: $v\n" if $v ne "-";
	&one_file ("install: ", $install{"$p $v"});
	&one_file ("source:  ", $source{"$p $v"});
    }
}

for $p (sort keys %versions) {
    next if $skip{$p};
    print "@ $p\n";
    print "sdesc: ".$sdesc{$p} if $sdesc{$p};
    print "ldesc: ".$ldesc{$p} if $ldesc{$p};
    &one_version("", "curr");
    &one_version("[prev]\n", "prev");
    &one_version("[test]\n", "test");
    print "\n";
}

select (STDOUT);
close (TMPFILE);

open(NEW, $tmpfile);
open(OLD, "setup.ini");

$changed = 0;
while (1) {
    $new = <NEW>;
    $old = <OLD>;
    next if ($new =~ /setup-timestamp/ && $old =~ /setup-timestamp/);
    last if (! defined $new && ! defined $old);
    if ($new ne $old) {
	$changed = 1;
	last;
    }
}
close (NEW);
close (OLD);

if ($changed) {
    system "diff -c2 setup.ini $tmpfile";
    system "set -x; cp $tmpfile setup.ini";
}
unlink $tmpfile;
