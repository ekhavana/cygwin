%!PS-Adobe-3.0%%Title: (Microsoft Word - FINAL.DOC)%%Creator: (Microsoft Word: PSPrinter 8.3)%%CreationDate: (4:53 PM Monday, June 15, 1998)%%For: (tformaro)%%Pages: 8%%DocumentFonts: Times-Bold Times-Roman Times-Italic Courier Symbol ArialMT%%DocumentNeededFonts: Times-Bold Times-Roman Times-Italic Courier Symbol ArialMT%%DocumentSuppliedFonts:%%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%%DocumentMedia: Default 612 792 0 () ()%ADO_ImageableArea: 30 30.96 582 761.04%%EndCommentsuserdict begin/dscInfo 5 dict dup begin/Title(Microsoft Word - FINAL.DOC)def/Creator(Microsoft Word: PSPrinter 8.3)def/CreationDate(4:53 PM Monday, June 15, 1998)def/For(tformaro)def/Pages 8 defend def end/md 127 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: adobe_psp_basic%%Copyright: Copyright 1990-1995 Adobe Systems Incorporated. All Rights Reserved./bd{bind def}bind def/xdf{exch def}bd/xs{exch store}bd/ld{load def}bd/Z{0 def}bd/T/true/F/false/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath14{ld}repeat/$m matrix def/av 81 def/por true def/normland false def/psb-nosave{}bd/pse-nosave{}bd/us Z/psb{/us save store}bd/pse{us restore}bd/level2/languagelevel where{pop languagelevel 2 ge}{false}ifelsedef/featurecleanup{stoppedcleartomarkcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bdlevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/setcopies{userdict/#copies 3 -1 roll put}bdlevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/setcopies{1 dict begin/NumCopies xdf currentdict end setpagedevice}bdlevel2 not endnoload/pm Z/mT Z/sD Z/realshowpage Z/initializepage{/pm save store mT concat}bd/endp{pm restore showpage}def/$c/DeviceRGB def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFile%%BeginFile: adobe_psp_colorspace_level1%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved./G/setgray ld/:F/setrgbcolor ld/:F4 systemdict/setcmykcolor known{/setcmykcolor ld}{{3{dup 3 -1 roll adddup 1 gt{pop 1}if 1 exch sub4 1 roll}repeat pop setrgbcolor}bd}ifelse/:Fx{aload length 1 sub[{G}{}{:F}{:F4}]exch get exec}bd/:rg{}bd/:sc{}bd/:sr{pop}bd/:dc{pop}bd/:fr{pop}bd/:dr{}bd/:fCRD{pop}bd%%EndFile%%BeginFile: adobe_psp_basic_text%%Copyright: Copyright 1990-1995 Adobe Systems Incorporated. All Rights Reserved./S/show ld/A{0.0 exch ashow}bd/R{0.0 exch 32 exch widthshow}bd/W{0.0 3 1 roll widthshow}bd/J{0.0 32 4 2 roll 0.0 exch awidthshow}bd/V{0.0 4 1 roll 0.0 exch awidthshow}bd/fcflg true def/fc{fcflg{vmstatus exch sub 50000 lt{(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store}if pop}if}bd/$f[1 0 0 -1 0 0]def/:ff{$f :mf}bd/MacEncoding StandardEncoding 256 array copy defMacEncoding 39/quotesingle putMacEncoding 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacEncoding 128 128 getinterval astore poplevel2 startnoload/copyfontdict{findfont dup length dictbegin{1 index/FID ne{def}{pop pop}ifelse}forall}bdlevel2 endnoload level2 not startnoload/copyfontdict{findfont dup length dictcopybegin}bdlevel2 not endnoloadmd/fontname known not{/fontname/customfont def}if/Encoding Z/:mre{copyfontdict/Encoding MacEncoding deffontname currentdictenddefinefont :ff def}bd/:bsr{copyfontdict/Encoding Encoding 256 array copy defEncoding dup}bd/pd{put dup}bd/:esr{pop popfontname currentdictenddefinefont :ff def}bd/scf{scalefont def}bd/scf-non{$m scale :mf setfont}bd/ps Z/fz{/ps xs}bd/sf/setfont ld/cF/currentfont ld/mbf{/makeblendedfont where{popmakeblendedfont/ABlend exch definefont}{pop}ifelsedef}def%%EndFile/currentpacking where {pop sc_oldpacking setpacking}if end%%EndProlog%%BeginSetupmd begincountdictstack[{%%BeginFeature: *ManualFeed Falselevel2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse%%EndFeature}featurecleanupcountdictstack[{%%BeginFeature: *InputSlot Upper%%EndFeature}featurecleanupcountdictstack[{%%BeginFeature: *PageRegion LetterSmalllevel2 {		2 dict dup /PageSize [612 792] put dup /ImagingBBox [30 31 582 761] put setpagedevice	}{		/lettersmall where {pop lettersmall} {letterR} ifelse	} ifelse%%EndFeature}featurecleanup(tformaro; document: Microsoft Word - FINAL.DOC)setjob/mT[.24 0 0 -.24 29.999 761.009]def/sD 16 dict def300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse%%IncludeFont: Times-Bold%%IncludeFont: Times-Roman%%IncludeFont: Times-Italic%%IncludeFont: Courier%%IncludeFont: Symbol%%IncludeFont: ArialMT/f0_1/Times-Bold:mre/f0_58 f0_1 58 scf/f0_50 f0_1 50 scf/f0_41 f0_1 41 scf/f1_1/Times-Roman:mre/f1_50 f1_1 50 scf/f1_41 f1_1 41 scf/f1_29 f1_1 29 scf/f2_1/Times-Italic:mre/f2_50 f2_1 50 scf/f3_1/Courier:mre/f3_41 f3_1 41 scf/f4_1/Symbol:bsr240/apple pd:esr/f4_41 f4_1 41 scf/f5_1/ArialMT:mre/f5_41 f5_1 41 scf/Courier findfont[10 0 0 -10 0 0]:mf setfont%%EndSetup%%Page: 1 1%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 1 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC379 224 :Mf0_58 sf.02 .002(Cygwin32: A Free Win32 Porting Layer for UNIX\250 Applications)J1019 391 :Mf1_50 sf.025 .002(Geoffrey J. Noer)J1033 442 :Mf1_41 sf(noer@cygnus.com)S1013 545 :Mf2_50 sf(Cygnus Solutions)S925 603 :M(1325 Chesapeake Terrace)S971 660 :M(Sunnyvale, CA 94089)S175 914 :Mf0_50 sf.009(Abstract)A175 1015 :Mf1_41 sf7.095 .71(Cygwin32 is a full-featured Win32 porting layer for)J175 1063 :M6.752 .675(UNIX applications, compatible with all Win32 hosts)J175 1112 :M5.969 .597(\(currently Microsoft Windows NT, Windows 95, and)J175 1160 :M8.368 .837(Windows 98\).  It was invented in 1995 by Cygnus)J175 1208 :M(S)S198 1208 :M(o)S219 1208 :M3.736 .374(lutions as part of the answer to the question of how)J175 1256 :M.004 0(to port the GNU development tools to the Win32 host.)J175 1354 :M2.542 .254(The Win32-hosted )J501 1354 :M2.76 .276(GNUPro compiler tools that use the)J175 1402 :M3.49 .349(library are available for a variety of embedded proce)J1084 1402 :M(s)S1100 1402 :M(-)S175 1450 :M2.969 .297(sors as well as a native version for writing Win32 pr)J1079 1450 :M(o)S1100 1450 :M(-)S175 1498 :M4.946 .495(grams.  By basing this technology on the GNU tools,)J175 1547 :M4.772 .477(Cygnus provides developers with a high-performance,)J175 1595 :M4.561 .456(feature-rich 32-bit code development environment, in)J1100 1595 :M(-)S175 1643 :M.007 .001(cluding a graphical source-level debugger.)J175 1741 :M8.371 .837(Cygwin32 is a Dynamic-Linked Library \(DLL\) that)J175 1789 :M7.18 .718(provides a large subset of the system calls found in)J175 1837 :M4.904 .49(common UNIX implementations.  The current release)J175 1885 :M3.6 .36(includes all POSIX.1/90)J590 1864 :Mf1_29 sf7.528 .753( )J605 1885 :Mf1_41 sf3.08 .308(calls except for )Jf3_41 sf1.639(setuid)A1036 1885 :Mf1_41 sf5.791 .579( and)J175 1933 :Mf3_41 sf.012(mkfifo)A323 1933 :Mf1_41 sf1.226 .123(, all ANSI C)Jf1_29 sf0 -21 rm.165 .017( )J0 21 rmf1_41 sf2.006 .201(standard calls, and many common)J175 1981 :M.01 .001(BSD and SVR4 services including Berkeley sockets.)J175 2080 :M7.566 .757(This article will discuss our experiences porting the)J175 2128 :M2.438 .244(GNU development tools to the Win32 host and explore)J175 2176 :M10.037 1.004(the development and architecture of the Cygwin32)J175 2224 :M(library.)S175 2329 :Mf0_50 sf.035 .003(1. Introduction)J175 2430 :Mf1_41 sf10.124 1.012(Cygnus Solutions was founded in 1989 to provide)J175 2478 :M5.386 .539(commercial support and development services for the)J175 2526 :M8.035 .803(GNU development tools, focusing on the embedded)J175 2574 :M1.582 .158(computing industry.  The tools include the GNU C/C++)J175 2622 :M3.18 .318(compiler \(GCC/G++\), assembler \(GAS\), linker \(GLD\),)J175 2670 :M4.662 .466(and debugger \(GDB\).  As of June 1998, Cygnus sells)J175 2718 :M.009 .001(support for over 150 host/target combinations.)J1188 908 :M4.658 .466(When the Free Software Foundation \(FSF\) first wrote)J1188 956 :M8.282 .828(the GNU tools in the mid-1980s, portability among)J1188 1004 :M7.599 .76(existing and future UNIX operating systems was an)J1188 1052 :M1.214 .121(important goal.  By mid-1995, the tools had been ported)J1188 1100 :M4.78 .478(to 16-bit DOS using the go32 32-bit extender by DJ)J1188 1155 :M(Delorie)S1311 1134 :Mf1_29 sf(1)S1325 1155 :Mf1_41 sf2.63 .263(.  However, no one had completed a native 32-)J1188 1206 :M4.103 .41(bit port for Windows NT and 95/98.  It seemed likely)J1188 1254 :M7.443 .744(that the demand for Win32-hosted native and cross-)J1188 1302 :M3.879 .388(development tools would soon be large enough to ju)J2097 1302 :M(s)S2113 1302 :M(-)S1188 1350 :M(tify the development costs involved.)S1188 1455 :Mf0_50 sf.015 .001(2. Porting the GNU Compiler to Win32)J1188 1556 :Mf1_41 sf5.687 .569(The first step in porting the compiler tools to Win32)J1188 1604 :M5.436 .544(was to enhance them so that they could generate and)J1188 1652 :M5.723 .572(interpret Win32 native object files, using Microsoft\325s)J1188 1701 :M6.547 .655(Portable Executable \(PE\) format.  This proved to be)J1188 1749 :M3.578 .358(relatively straightforward because of similarities to the)J1188 1797 :M3.75 .375(Common Object File Format \(COFF\), which the GNU)J1188 1845 :M5.274 .527(tools already supported.  Most of these changes were)J1188 1893 :M6.308 .631(confined to the Binary File Descriptor \(BFD\) library)J1188 1941 :M(and to the linker.)S1188 2039 :M6.931 .693(In order to support the Win32 Application Progra)J2081 2039 :M(m)S2113 2039 :M(-)S1188 2087 :M5.442 .544(ming Interface \(API\), we extended the capabilities of)J1188 2135 :M2.534 .253(the binary utilities to handle Dynamic-Linked Libraries)J1188 2184 :M8.208 .821(\(DLLs\).  After creating export lists for the specific)J1188 2232 :M5.06 .506(Win32 API DLLs that are shipped with Win32 hosts,)J1188 2280 :M4.351 .435(the tools were able to generate static libraries that ex)J2113 2280 :M(-)S1188 2328 :M3.22 .322(ecutables could use to gain access to Win32 API fun)J2095 2328 :M(c-)S1188 2376 :M3.88 .388(tions.  Because of redistribution restrictions on Micro)J2113 2376 :M(-)S1188 2424 :M10.37 1.037(soft\325s Win32 API header files, we wrote our own)J1188 2472 :M2.456 .246(Win32 header files from scratch on an as-needed basis.)J1188 2520 :M4.236 .424(Once this work was completed, we were able to build)J1188 2568 :M9.377 .938(UNIX-hosted cross-compilers capable of generating)J1188 2617 :M.005 .001(valid PE executables that ran on Win32 systems.)J1188 2715 :M1.832 .183(The next task was to port the compiler tools themselves)J1188 2763 :M1.498 .15(to Win32.  Previous experiences using Microsoft Visual)J1188 2811 :M4.116 .412(C++ to port GDB convinced us to find another means)J1188 2859 :M5.5 .55(for bootstrapping the full set of tools.  In addition to)Jendp%%PageTrailer%%Page: 2 2%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 2 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf1_41 sf11.818 1.182(wanting to use our own compiler technology, we)J175 257 :M6.384 .638(wanted a portable build system.  The GNU develop)J1100 257 :M(-)S175 305 :M3.674 .367(ment tools\325 configuration and build procedures require)J175 353 :M4.739 .474(a large number of additional UNIX utilities not avai)J1089 353 :M(l-)S175 402 :M6.755 .676(able on Win32 hosts.  So we decided to use UNIX-)J175 450 :M12.098 1.21(hosted cross-compilers to build our Win32-hosted)J175 498 :M(n)S196 498 :M6.587 .659(ative and cross-development tools.  It made perfect)J175 546 :M7.55 .755(sense to do this since we were successfully using a)J175 594 :M9.205 .92(nearly identical technique to build our DOS-hosted)J175 642 :M(products.)S175 740 :M4.456 .446(The next obstacle to overcome was the many depend)J1100 740 :M(-)S175 788 :M3.189 .319(encies on UNIX system calls in the sources, especially)J175 837 :M3.704 .37(in the GNU debugger GDB.  While we could have r)J1082 837 :M(e-)S175 885 :M8.269 .827(written sizable portions of the source code to work)J175 933 :M3.933 .393(within the context of the Win32 API \(as was done for)J175 981 :M5.219 .522(the DOS-hosted tools\), this would have been prohib)J1089 981 :M(i-)S175 1029 :M5.09 .509(tively time-consuming.  Worse, we would have intr)J1079 1029 :M(o)S1100 1029 :M(-)S175 1077 :M6.381 .638(duced )J293 1077 :M5.576 .558(conditionalized code that would have been ex)J1100 1077 :M(-)S175 1125 :M4.991 .499(pensive to maintain in the long run.  Instead, Cygnus)J175 1173 :M6.086 .609(developers took a substantially different approach by)J175 1221 :M(writing Cygwin32.)S175 1326 :Mf0_50 sf(3. Initial Goals)S175 1427 :Mf1_41 sf5.062 .506(The original goal of Cygwin32 was simply to get the)J175 1475 :M1.719 .172(development tools working.  Completeness with respect)J175 1530 :M5.689 .569(to POSIX.1)J376 1509 :Mf1_29 sf(2)S390 1530 :Mf1_41 sf6.666 .667( and other relevant UNIX standards was)J175 1581 :M(not a priority.)S175 1679 :M3.084 .308(Part of our definition of \322working native tools\323 is ha)J1079 1679 :M(v)S1100 1679 :M(-)S175 1727 :M7.285 .728(ing a build environment similar enough to UNIX to)J175 1776 :M8.586 .859(support rebuilding the tools themselves on the host)J175 1824 :M1.524 .152(system, a process we call self-hosting.  The typical con)J1100 1824 :M(-)S175 1872 :M4.61 .461(figuration procedure for a GNU tool involves running)J175 1920 :M4.716 .472(\322configure\323, a complex Bourne shell script that dete)J1086 1920 :M(r)S1100 1920 :M(-)S175 1968 :M7.173 .717(mines information about the host system. The script)J175 2016 :M7.047 .705(then uses that information to generate the Makefiles)J175 2064 :M(used to build the tool on the host in question.)S175 2162 :M5.241 .524(This configuration mechanism is needed under UNIX)J175 2211 :M9.916 .992(because of the large number of varying flavors of)J175 2259 :M2.675 .267(UNIX.  If Microsoft continues to produce new variants)J175 2307 :M7.288 .729(of the Win32 API as it releases new versions of its)J175 2355 :M(o)S196 2355 :M(p)S217 2355 :M2.158 .216(erating systems, it may prove to be quite valuable on)J175 2403 :M(the Win32 host as well.)S175 2501 :M2.277 .228(The need to support this configuration procedure added)J175 2549 :M7.18 .718(the requirement of supporting user tools such as sh,)J175 2597 :M5.511 .551(make, file utilities \(e.g. )J603 2597 :M5.615 .562(ls and rm\), text utilities \(e.g.)J175 2645 :M1.81 .181(cat, )J246 2645 :M1.553 .155(tr\), shell utilities \(e.g. echo, date, uname\), sed, )J1034 2645 :M(awk,)S175 2694 :M4.821 .482(find, )J269 2694 :M4.556 .456(xargs, tar, and gzip, among many others.  Previ-)J175 2742 :M8.321 .832(ously, most of these user tools had only been built)J175 2790 :M3.879 .388(natively \(on the host on which they would run\).  As a)J1188 209 :M5.394 .539(result, we had to modify their configure scripts to be)J1188 257 :M.01 .001(compatible with cross-compilation.)J1188 355 :M1.537 .154(Other than making the necessary configuration changes,)J1188 403 :M4.863 .486(we wanted to avoid Win32-specific changes since the)J1188 452 :M4.503 .45(UNIX compatibility was to be provided by Cygwin32)J1188 500 :M4.159 .416(as much as possible.  While we knew this would be a)J1188 548 :M5.505 .551(sizable amount of work, there was more to gain than)J1188 596 :M2.727 .273(just achieving self-hosting of the tools.  Supporting the)J1188 644 :M2.711 .271(configuration of the development tools would also pro)J2113 644 :M(-)S1188 692 :M10.4 1.04(vide an excellent method of testing the Cygwin32)J1188 740 :M(library.)S1188 838 :M2.486 .249(Although we were able to build working Win32-hosted)J1188 887 :M1.58 .158(toolchains with cross-compilers relatively soon after the)J1188 935 :M6.598 .66(birth of Cygwin32, it took much longer than we ex)J2113 935 :M(-)S1188 983 :M8.156 .816(pected before the tools could reliably rebuild the)J2081 983 :M(m)S2113 983 :M(-)S1188 1031 :M14.602 1.46(selves on the Win32 host because of the many)J1188 1079 :M(co)S1227 1079 :M(m)S1259 1079 :M(plexities involved.)S1188 1184 :Mf0_50 sf.018 .002(4. \322Harnessing the Power of the Internet\323)J1188 1285 :Mf1_41 sf5.461 .546(Instead of keeping the Cygwin32 technology proprie-)J1188 1333 :M2.802 .28(tary and developing it in-house, Cygnus chose to make)J1188 1381 :M3.649 .365(it publicly available under the terms of the GNU Ge)J2092 1381 :M(n)S2113 1381 :M(-)S1188 1429 :M1.27 .127(eral Public License \(GPL\), the traditional license for the)J1188 1477 :M4.252 .425(GNU tools.  Since its inception, we have made a new)J1188 1525 :M5.597 .56(\322GNU-Win32 beta release\323 available via ftp over the)J1188 1574 :M5.007 .501(Internet every three or four months.  Each release in)J2113 1574 :M(-)S1188 1622 :M1.271 .127(cludes binaries of Cygwin32 and the development tools,)J1188 1670 :M7.301 .73(coupled with the source code needed to build them.)J1188 1718 :M6.468 .647(Unlike standard Cygnus products, these free releases)J1188 1766 :M3.767 .377(come without any assurances of quality or support, al-)J1188 1814 :M1.812 .181(though we provide a mailing list that is used for discus)J2113 1814 :M(-)S1188 1862 :M(sion and feedback.)S1188 1960 :M6.398 .64(In retrospect, making the technology freely available)J1188 2008 :M5.802 .58(was a good decision because of the high demand for)J1188 2057 :M3.929 .393(quality 32-bit native tools in the Win32 arena, as well)J1188 2105 :M4.106 .411(as significant additional interest in a UNIX portability)J1188 2153 :M3.699 .37(layer like Cygwin32.  While far from perfect, the beta)J1188 2201 :M3.746 .375(releases are good enough for many people.  They pr)J2092 2201 :M(o)S2113 2201 :M(-)S1188 2249 :M3.031 .303(vide us with tens of thousands of interested developers)J1188 2297 :M.989 .099(who are willing to use and test the tools.  A few of them)J1188 2345 :M2.367 .237(are even willing to contribute code fixes and new func-)J1188 2393 :M5.401 .54(tionality to the library.  As of the last public release,)J1188 2441 :M5.149 .515(developers on the Net had written or improved a sig)J2113 2441 :M(-)S1188 2490 :M10.408 1.041(nificant portion of the library, including important)J1188 2538 :M(as)S1222 2538 :M10.592 1.059(pects such as support for UNIX signals and the)J1188 2586 :M(TTY/PTY calls.)S1188 2684 :M3.626 .363(In order to spur as much Net participation as possible,)J1188 2732 :M7.636 .764(the Cygwin32 project features an open development)J1188 2780 :M2.552 .255(model.  We make weekly source snapshots available to)J1188 2828 :M2.173 .217(the general public in addition to the periodic full GNU-)Jendp%%PageTrailer%%Page: 3 3%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 3 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf1_41 sf4.781 .478(Win32 releases.  A developers\325 mailing list facilitates)J175 257 :M.009 .001(discussion of proposed changes to the library.)J175 355 :M5.235 .524(In addition to the GPL version of Cygwin32, Cygnus)J175 403 :M3.066 .307(provides a commercial license for supported customers)J175 452 :M.009 .001(of the native Win32 GNUPro tools.)J175 556 :Mf0_50 sf.019 .002(5. The Cygwin32 Architecture)J175 657 :Mf1_41 sf1.925 .193(Now we turn to an analysis of the actual architecture of)J175 706 :M(the Cygwin32 library.)S175 804 :M5.636 .564(When a binary linked against the library is executed,)J175 852 :M2.382 .238(the Cygwin32 DLL is loaded into the application\325s text)J175 900 :M6.101 .61(segment.  Because we are trying to emulate a UNIX)J175 948 :M9.102 .91(kernel which needs access to all processes running)J175 996 :M(u)S196 996 :M(n)S217 996 :M3.121 .312(der it, the first Cygwin32 DLL to run creates shared)J175 1044 :M12.119 1.212(memory areas that other processes using separate)J175 1092 :M(in)S207 1092 :M3.351 .335(stances of the DLL can access.  This is used to keep)J175 1140 :M9.523 .952(track of open file descriptors and assist )J931 1140 :Mf3_41 sf2.217(fork)Af1_41 sf4.815 .482( and)J175 1189 :Mf3_41 sf.762(exec)Af1_41 sf1.81 .181(, among other purposes.  In addition to the shared)J175 1237 :M25.891 2.589(memory regions, every process also has a)J175 1285 :Mf3_41 sf.011(per_process)A446 1285 :Mf1_41 sf12.191 1.219( structure that contains information)J175 1333 :M7.631 .763(such as process id, user id, signal masks, and other)J175 1381 :M.018 .002(similar process-specific information.)J175 1479 :M3.452 .345(The DLL is implemented using the Win32 API, which)J175 1527 :M2.406 .241(allows it to run on all Win32 hosts.  Because processes)J175 1575 :M9.336 .934(run under the standard Win32 subsystem, they can)J175 1624 :M4.658 .466(access both the UNIX compatibility calls provided by)J175 1672 :M2.235 .224(Cygwin32 as well as any of the Win32 API calls.  This)J175 1720 :M3.042 .304(gives the programmer complete flexibility in designing)J175 1768 :M1.251 .125(the structure of their program in terms of the APIs used.)J175 1816 :M5.874 .587(For example, they could write a Win32-specific GUI)J175 1864 :M2.281 .228(using Win32 API calls on top of a UNIX back-end that)J175 1912 :M(uses Cygwin32.)S175 2010 :M8.876 .888(Early on in the development process, we made the)J175 2058 :M(im)S218 2058 :M1.228 .123(portant design decision that it would not be necessary)J175 2107 :M10.978 1.098(to strictly adhere to existing UNIX standards like)J175 2155 :M5.705 .57(POSIX.1 if it was not possible or if it would signif)J1089 2155 :M(i-)S175 2203 :M3.07 .307(cantly diminish the usability of the tools on the Win32)J175 2251 :M3.605 .36(platform.  In many cases, an environment variable can)J175 2299 :M11.938 1.194(be set to override the default behavior and force)J175 2347 :M(sta)S221 2347 :M(n)S242 2347 :M(dards compliance.)S175 2445 :Mf0_41 sf.012 .001(5.1. Windows NT != Windows 95/98)J175 2543 :Mf1_41 sf1.211 .121(While Windows 95 and Windows 98 are similar enough)J175 2591 :M4.362 .436(to each other that we can safely ignore the distinction)J175 2640 :M9.836 .984(when implementing Cygwin32, Windows NT is an)J175 2688 :M(ex)S214 2688 :M3.926 .393(tremely different operating system.  For this reason,)J175 2736 :M3.777 .378(whenever the DLL is loaded, the library checks which)J175 2784 :M.004 0(operating system is active so that it can act accordingly.)J1188 209 :M2.64 .264(In some cases, the Win32 API is only different for hi)J2097 209 :M(s)S2113 209 :M(-)S1188 257 :M4.048 .405(torical reasons.  In this situation, the same basic func-)J1188 305 :M11.04 1.104(tionality is available under 95/98 and NT but the)J1188 353 :M2.158 .216(method used to gain this functionality differs.  A trivial)J1188 402 :M3.907 .391(example: in our implementation of )J1800 402 :Mf3_41 sf1.024(uname)Af1_41 sf2.474 .247(, the library)J1188 450 :M2.553 .255(examines the )Jf3_41 sf.961(sysinfo.dwProcessorType)A2008 450 :Mf1_41 sf10.49 1.049( stru)J2095 450 :M(c-)S1188 498 :M8.119 .812(ture member to figure out the processor type under)J1188 546 :M2.581 .258(95/98.  This field is not supported in NT, which has its)J1188 594 :M3.012 .301(own operating system-specific structure member called)J1188 642 :Mf3_41 sf.011(sysinfo.wProcessorLevel)A1754 642 :Mf1_41 sf(.)S1188 740 :M9.182 .918(Other differences between NT and 95/98 are much)J1188 788 :M3.858 .386(more fundamental in nature.  The best example is that)J1188 837 :M.006 .001(only NT provides a security model.)J1188 935 :Mf0_41 sf.018 .002(5.2. Permissions and Security)J1188 1033 :Mf1_41 sf5.853 .585(Windows NT includes a sophisticated security model)J1188 1081 :M1.865 .186(based on Access Control Lists \(ACLs\).  Although some)J1188 1129 :M6.737 .674(modern UNIX operating systems include support for)J1188 1177 :M3.341 .334(ACLs, Cygwin32 maps Win32 file ownership and per)J2113 1177 :M(-)S1188 1225 :M1.67 .167(missions to the more standard, older UNIX model.  The)J1188 1273 :Mf3_41 sf1.348(chmod)Af1_41 sf3.683 .368( call maps UNIX-style permissions back to the)J1188 1321 :M3.002 .3(Win32 equivalents.  Because many programs expect to)J1188 1370 :M1.919 .192(be able to find the )Jf3_41 sf1.187(/etc/passwd)A1790 1370 :Mf1_41 sf4.196 .42( and )J1880 1370 :Mf3_41 sf.011(/etc/group)A1188 1418 :Mf1_41 sf3.69 .369(files, we provide utilities that can be used to construct)J1188 1466 :M3.173 .317(them from the user and group information provided by)J1188 1514 :M(the operating system.)S1188 1612 :M4.723 .472(Under Windows NT, the administrator is permitted to)J1188 1660 :Mf3_41 sf3.668(chown)Af1_41 sf8.476 .848( files.  There is currently no mechanism to)J1188 1708 :M(sup)S1245 1708 :M1.895 .189(port the )J1387 1708 :Mf3_41 sf.012(setuid)A1535 1708 :Mf1_41 sf1.805 .18( concept or API call.  Although we)J1188 1756 :M4.186 .419(hope to support this functionality at some point in the)J1188 1804 :M4.82 .482(future, in practice, the programs we have ported have)J1188 1853 :M(not needed it.)S1188 1951 :M7.818 .782(Under Windows 95/98, the situation is considerably)J1188 1999 :M9.769 .977(different.  Since a security model is not provided,)J1188 2047 :M(Cy)S1236 2047 :M(g)S1257 2047 :M1.863 .186(win32 fakes file ownership by making all files look)J1188 2095 :M2.279 .228(like they are owned by a default user and group id.  As)J1188 2143 :M(u)S1209 2143 :M(n)S1230 2143 :M4.896 .49(der NT, file permissions can still be determined by)J1188 2191 :M(ex)S1227 2191 :M3.714 .371(amining their read/write/execute status.  Rather than)J1188 2239 :M3.776 .378(return an unimplemented error, under Windows 95/98,)J1188 2288 :M1.679 .168(the )Jf3_41 sf3.832 .383(chown )J1404 2288 :Mf1_41 sf1.989 .199(call succeeds immediately without actually)J1188 2336 :M3.154 .315(performing any action whatsoever.  This is appropriate)J1188 2384 :M2.418 .242(since essentially all users jointly own the files when no)J1188 2432 :M.01 .001(concept of file ownership exists.)J1188 2530 :M4.496 .45(It is important that we discuss the implications of our)J1188 2578 :M4.72 .472(\322kernel\323 using shared memory areas to store informa-)J1188 2626 :M5.684 .568(tion about Cygwin32 processes.  Because these areas)J1188 2674 :M5.232 .523(are not yet protected in any way, in principle a mali-)J1188 2722 :M9.404 .94(cious user could modify them to cause unexpected)J1188 2771 :M(b)S1209 2771 :M5.341 .534(ehavior in Cygwin32 processes.  While this is not a)J1188 2819 :M7.806 .781(new problem under Windows 95/98 \(because of the)Jendp%%PageTrailer%%Page: 4 4%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 4 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf1_41 sf4.129 .413(lack of operating system security\), it does constitute a)J175 257 :M2.947 .295(security hole under Windows NT.  This is because one)J175 305 :M12.366 1.237(user could affect the Cygwin32 programs run by)J175 353 :M3.924 .392(another user by changing the shared memory informa-)J175 402 :M9.004 .9(tion in ways that they could not in a more typical)J175 450 :M2.998 .3(WinNT pro)J371 450 :M3.476 .348(gram.  For this reason, it is not appropriate)J175 498 :M12.017 1.202(to use Cy)J364 498 :M(g)S385 498 :M9.456 .946(win32 in high-security applications.  In)J175 546 :M2.164 .216(practice, this will not be a major problem for most uses)J175 594 :M(of the library.)S175 692 :Mf0_41 sf(5.3. Files)S175 790 :Mf1_41 sf11.735 1.174(Cygwin32 supports both Win32- and POSIX-style)J175 838 :M10.469 1.047(paths, using either forward or back slashes as the)J175 887 :M(d)S196 887 :M7.295 .73(irectory delimiter.  Paths coming into the DLL are)J175 935 :M8.817 .882(translated from Win32 to POSIX as needed.  As a)J175 983 :M(r)S189 983 :M8.832 .883(esult, the library believes that the file system is a)J175 1031 :M2.691 .269(POSIX-compliant one, translating paths back to Win32)J175 1079 :M5.231 .523(paths whenever it calls a Win32 API function.  UNC)J175 1127 :M.012 .001(pathnames \(starting with two slashes\) are supported.)J175 1225 :M6.698 .67(The layout of this POSIX view of the Windows file)J175 1273 :M2.65 .265(system space is stored in the Windows registry.  While)J175 1321 :M1.602 .16(the slash \(\324/\325\) directory points to the system partition by)J175 1370 :M10.206 1.021(default, this is easy to change with the Cygwin32)J175 1418 :Mf3_41 sf1.357(mount)Af1_41 sf3.002 .3( utility.  In addition to selecting the slash parti-)J175 1466 :M3.17 .317(tion, it allows mounting arbitrary Win32 paths into the)J175 1514 :M3.559 .356(POSIX file system space.  Many people use the utility)J175 1562 :M1.905 .191(to mount each drive letter under the slash partition \(e.g.)J175 1610 :Mf3_41 sf(C:\\)S249 1610 :Mf1_41 sf( to )Sf3_41 sf(/c)Sf1_41 sf(, )S371 1610 :Mf3_41 sf(D:\\)S445 1610 :Mf1_41 sf( to )Sf3_41 sf(/d)Sf1_41 sf(, etc\311\).)S175 1708 :M8.073 .807(The library exports several Cygwin32-specific fun)J1082 1708 :M(c-)S175 1756 :M1.464 .146(tions that can be used by external programs to convert a)J175 1804 :M4.598 .46(path or path list from Win32 to POSIX or vice versa.)J175 1853 :M3.837 .384(Shell scripts and Makefiles cannot call these functions)J175 1901 :M1.301 .13(directly.  Instead, they can do the same path translations)J175 1949 :M1.897 .19(by executing the \322cygpath\323 utility program that we pr)J1079 1949 :M(o)S1100 1949 :M(-)S175 1997 :M(vide with Cygwin32.)S175 2095 :M3.291 .329(Win32 file systems are case preserving but case inse)J1079 2095 :M(n)S1100 2095 :M(-)S175 2143 :M4.281 .428(sitive.  Cygwin32 does not currently support case di)J1084 2143 :M(s)S1100 2143 :M(-)S175 2191 :M11.288 1.129(tinction because, in practice, few UNIX programs)J175 2239 :M(act)S223 2239 :M(u)S244 2239 :M3.233 .323(ally rely on it.  While we could mangle file names)J175 2288 :M2.917 .292(to support case distinction, this would add unnecessary)J175 2336 :M4.824 .482(overhead to the library and make it more difficult for)J175 2384 :M.009 .001(non-Cygwin32 applications to access those files.)J175 2482 :M1.161 .116(Symbolic links are emulated by files containing a magic)J175 2530 :M5.137 .514(cookie followed by the path to which the link points.)J175 2578 :M2.585 .258(They are marked with the System attribute so that only)J175 2626 :M6.327 .633(files with that attribute have to be read to determine)J175 2674 :M4.268 .427(whether or not the file is a symbolic link.  Hard links)J175 2722 :M5.203 .52(are fully supported under Windows NT on NTFS file)J175 2771 :M4.349 .435(systems.  On a FAT file system, the call falls back to)J1188 209 :M3.771 .377(simply copying the file, a strategy that works in many)J1188 257 :M(cases.)S1188 355 :M2.215 .221(The inode number for a file is calculated by hashing its)J1188 403 :M4.716 .472(full Win32 path.  The inode number generated by the)J1188 452 :Mf3_41 sf1.395(stat)Af1_41 sf3.127 .313( call always matches the one returned in )Jf3_41 sf1.744(d_ino)A1188 500 :Mf1_41 sf6.568 .657(of the )J1310 500 :Mf3_41 sf.012(dirent)A1458 500 :Mf1_41 sf5.742 .574( structure.  It is worth noting that the)J1188 548 :M4.906 .491(number produced by this method is not guaranteed to)J1188 596 :M5.211 .521(be unique.  However, we have not found this to be a)J1188 644 :M5.519 .552(significant problem because of the low probability of)J1188 692 :M(generating a duplicate inode number.)S1188 790 :Mf0_41 sf.006 .001(5.4. Text Mode vs. Binary Mode)J1188 888 :Mf1_41 sf1.409 .141(Interoperability with other Win32 programs such as text)J1188 937 :M7.025 .703(editors was critical to the success of the port of the)J1188 985 :M(d)S1209 985 :M2.933 .293(evelopment tools.  Most Cygnus customers upgrading)J1188 1033 :M1.472 .147(from the older DOS-hosted )J1656 1033 :M1.274 .127(toolchains expected the new)J1188 1081 :M4.535 .453(Win32-hosted ones to continue to work with their old)J1188 1129 :M(development sources.)S1188 1227 :M4.326 .433(Unfortunately, UNIX and Win32 use different end-of-)J1188 1275 :M4.93 .493(line terminators in text files.  Consequently, carriage-)J1188 1323 :M8.361 .836(return newlines have to be translated on the fly by)J1188 1371 :M5.661 .566(Cygwin32 into a single )J1615 1371 :M5.24 .524(newline when reading in text)J1188 1420 :M2.971 .297(mode.  The control-z character is interpreted as a valid)J1188 1468 :M.013 .001(end-of-file character for a similar reason.)J1188 1566 :M1.595 .16(This solution addresses the compatibility requirement at)J1188 1614 :M2.57 .257(the expense of violating the POSIX standard that states)J1188 1662 :M8.388 .839(that text and binary mode will be identical. Conse-)J1188 1710 :M3.982 .398(quently, processes that attempt to )J1780 1710 :Mf3_41 sf.993(lseek)Af1_41 sf2.643 .264( through text)J1188 1758 :M2.853 .285(files can no longer rely on the number of bytes read as)J1188 1806 :M5.491 .549(an accurate indicator of position in the file.  For this)J1188 1854 :M3.846 .385(reason, an environment variable can be set to override)J1188 1903 :M(this behavior.)S1188 2001 :Mf0_41 sf.013 .001(5.5. ANSI C Library)J1188 2105 :Mf1_41 sf6.138 .614(We chose to include Cygnus\325 own existing ANSI C)J2112 2084 :Mf1_29 sf(3)S1188 2157 :Mf1_41 sf2.241 .224(library \322)J1330 2157 :M2.517 .252(newlib\323 as part of the library, rather than write)J1188 2205 :M1.088 .109(all of the lib C and math calls from scratch.  )J1936 2205 :M1.035 .104(Newlib is a)J1188 2253 :M3.764 .376(BSD-derived ANSI C library, previously only used by)J1188 2301 :M.012 .001(cross-compilers for embedded systems development.)J1188 2399 :M8.875 .887(The reuse of existing free implementations of such)J1188 2447 :M6.102 .61(things as the )Jf3_41 sf3.068(glob)Af1_41 sf2.325 .232(, )J1564 2447 :Mf3_41 sf.012(regexp)A1712 2447 :Mf1_41 sf8.323 .832(, and )J1823 2447 :Mf3_41 sf.012(getopt)A1971 2447 :Mf1_41 sf5.492 .549( libraries)J1188 2495 :M6.446 .645(saved us considerable effort.  In addition, Cygwin32)J1188 2543 :M10.407 1.041(uses Doug Lea\325s free )J1608 2543 :Mf3_41 sf.012(malloc)A1756 2543 :Mf1_41 sf7.997 .8( implementation that)J1188 2591 :M9.203 .92(successfully balances speed and compactness.  The)J1188 2640 :M9.663 .966(library accesses the )J1566 2640 :Mf3_41 sf.012(malloc)A1714 2640 :Mf1_41 sf10.552 1.055( calls via an exported)J1188 2688 :M15.251 1.525(function pointer.  This makes it possible for a)J1188 2736 :M(Cy)S1236 2736 :M(g)S1257 2736 :M6.492 .649(win32 process to provide its own malloc if it so)J1188 2784 :M(desires.)Sendp%%PageTrailer%%Page: 5 5%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 5 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf0_41 sf.013 .001(5.6. Process Creation)J175 307 :Mf1_41 sf5.829 .583(The )J257 307 :Mf3_41 sf1.382(fork)Af1_41 sf3.85 .385( call in Cygwin32 is particularly interesting)J175 355 :M2.353 .235(because it does not map well on top of the Win32 API.)J175 403 :M8.085 .809(This makes it very difficult to implement correctly.)J175 452 :M3.491 .349(Currently, the Cygwin32 )J613 452 :Mf3_41 sf.948(fork)Af1_41 sf2.842 .284( is a non-copy-on-write)J175 500 :M7.238 .724(implementation similar to what was present in early)J175 548 :M.023 .002(flavors of UNIX.)J175 646 :M1.323 .132(The first thing that happens when a parent process forks)J175 694 :M4.477 .448(a child process is that the parent initializes a space in)J175 742 :M9.777 .978(the Cygwin32 process table for the child.  It then)J175 790 :M(cr)S207 790 :M9.335 .933(eates a suspended child process using the Win32)J175 838 :Mf3_41 sf(Cre)S249 838 :M1.074(ateProcess)Af1_41 sf2.375 .237( call.  Next, the parent process calls)J175 887 :Mf3_41 sf.012(setjmp)A323 887 :Mf1_41 sf4.586 .459( to save its own context and sets a pointer to)J175 935 :M2.434 .243(this in a Cygwin32 shared memory area \(shared among)J175 983 :M2.422 .242(all Cygwin32 tasks\).  It then fills in the child\325s )Jf3_41 sf1.454(.data)A175 1031 :Mf1_41 sf5.358 .536(and )Jf3_41 sf(.)S279 1031 :M(bss)S353 1031 :Mf1_41 sf6.466 .647( sections by copying from its own address)J175 1079 :M4.825 .483(space into the suspended child's address space.  After)J175 1127 :M3.665 .367(the child\325s address space is initialized, the child is run)J175 1175 :M2.249 .225(while the parent waits on a )J646 1175 :M1.978 .198(mutex.  The child discovers)J175 1223 :M2.465 .247(it has been forked and longjumps using the saved jump)J175 1271 :M7.644 .764(buffer.  The child then sets the mutex the parent is)J175 1320 :M5.11 .511(waiting on and blocks on another )J778 1320 :M5.404 .54(mutex.  This is the)J175 1368 :M2.552 .255(signal for the parent to copy its stack and heap into the)J175 1416 :M8.013 .801(child, after which it releases the )J782 1416 :M8.009 .801(mutex the child is)J175 1464 :M1.59 .159(waiting on and returns from the )Jf3_41 sf.681(fork)Af1_41 sf1.347 .135( call.  Finally, the)J175 1512 :M3.154 .315(child wakes from blocking on the last mutex, recreates)J175 1560 :M4.689 .469(any memory-mapped areas passed to it via the shared)J175 1608 :M.013 .001(area, and returns from )Jf3_41 sf(fork)Sf1_41 sf( itself.)S175 1706 :M4.515 .451(While we have some ideas as to how to speed up our)J175 1754 :Mf3_41 sf1.26(fork)Af1_41 sf3.454 .345( implementation by reducing the number of co)J1079 1754 :M(n)S1100 1754 :M(-)S175 1803 :M8.356 .836(text switches between the parent and child process,)J175 1851 :Mf3_41 sf1.01(fork)Af1_41 sf2.77 .277( will almost certainly always be inefficient under)J175 1899 :M2.096 .21(Win32.  Fortunately, in most circumstances the )Jf3_41 sf.958(spawn)A175 1947 :Mf1_41 sf6.099 .61(family of calls provided by Cygwin32 can be subst)J1089 1947 :M(i-)S175 1995 :M7.011 .701(tuted for a )J383 1995 :Mf3_41 sf2.102(fork)Af1_41 sf.974(/)Af3_41 sf2.102(exec)Af1_41 sf4.373 .437( pair with only a little effort.)J175 2043 :M1.365 .137(These calls map cleanly on top of the Win32 API.  As a)J175 2091 :M7.843 .784(result, they are much more efficient.  Changing the)J175 2139 :M7.017 .702(compiler\325s driver program to call )Jf3_41 sf2.615(spawn)Af1_41 sf6.052 .605( instead of)J175 2188 :Mf3_41 sf1.738(fork)Af1_41 sf4.736 .474( was a trivial change and increased compilation)J175 2236 :M.006 .001(speeds by twenty to thirty percent in our tests.)J175 2334 :M4.97 .497(However, )J355 2334 :Mf3_41 sf2.211(spawn)Af1_41 sf2.865 .287( and )Jf3_41 sf2.211(exec)Af1_41 sf4.798 .48( present their own set of)J175 2382 :M5.447 .545(difficulties.  Because there is no way to do an actual)J175 2430 :Mf3_41 sf2.097(exec)Af1_41 sf5.313 .531( under Win32, Cygwin32 has to invent its own)J175 2478 :M4.4 .44(Process IDs \()J408 2478 :M4.797 .48(PIDs\).  As a result, when a process pe)J1086 2478 :M(r)S1100 2478 :M(-)S175 2526 :M10.845 1.085(forms multiple )J465 2526 :Mf3_41 sf4.077(exec)Af1_41 sf9.604 .96( calls, there will be multiple)J175 2574 :M(Win)S246 2574 :M2.227 .223(dows )J346 2574 :M1.834 .183(PIDs associated with a single Cygwin32 PID.)J175 2622 :M3.361 .336(In some cases, stubs of each of these Win32 processes)J175 2671 :M14.652 1.465(may linger, waiting for their )J765 2671 :Mf3_41 sf1.758(exec\325)Af1_41 sf7.585 .758(d Cygwin32)J175 2719 :M(pro)S230 2719 :M(cess to exit.)S1188 209 :Mf0_41 sf(5.7. Signals)S1188 307 :Mf1_41 sf6.503 .65(When a Cygwin32 process starts, the library starts a)J1188 355 :M1.135 .114(secondary thread for use in signal handling.  This thread)J1188 403 :M5.418 .542(waits for Windows events used to pass signals to the)J1188 452 :M1.253 .125(process.  When a process notices it has a signal, it scans)J1188 500 :M4.089 .409(its signal bitmask and handles the signal in the appr)J2092 500 :M(o)S2113 500 :M(-)S1188 548 :M(priate fashion.)S1188 646 :M2.404 .24(Several complications in the implementation arise from)J1188 694 :M6.997 .7(the fact that the signal handler operates in the same)J1188 742 :M10.323 1.032(address space as the executing program.  The )J2069 742 :M(im-)S1188 790 :M(med)S1259 790 :M7.435 .743(iate consequence is that Cygwin32 system func-)J1188 838 :M6.819 .682(tions are interruptible unless special care is taken to)J1188 887 :M7.881 .788(avoid this.   We go to some lengths to prevent the)J1188 935 :Mf3_41 sf.012(sig_send)A1385 935 :Mf1_41 sf4.471 .447( function that sends signals from being in-)J1188 983 :M3.697 .37(terrupted.  In the case of a process sending a signal to)J1188 1031 :M4.028 .403(another process, we place a mutex around )J1929 1031 :Mf3_41 sf.012(sig_send)A1188 1079 :Mf1_41 sf.847 .085(such that )Jf3_41 sf.455(sig_send)A1547 1079 :Mf1_41 sf1.864 .186( will not be interrupted until it has)J1188 1127 :M(co)S1227 1127 :M(m)S1259 1127 :M(pletely finished sending the signal.)S1188 1225 :M1.584 .158(In the case of a process sending itself a signal, we use a)J1188 1273 :M8.395 .839(separate semaphore/event pair instead of the )J2013 1273 :M(mutex.)S1188 1321 :Mf3_41 sf.012(sig_send)A1385 1321 :Mf1_41 sf9.825 .982( starts by resetting the event and incre-)J1188 1370 :M3.789 .379(menting the semaphore that flags the signal handler to)J1188 1418 :M5.606 .561(process the signal.  After the signal is processed, the)J1188 1466 :M5.643 .564(signal handler signals the event that it is done.  This)J1188 1514 :M4.698 .47(process keeps intraprocess signals synchronous, as r)J2095 1514 :M(e-)S1188 1562 :M.017 .002(quired by POSIX.)J1188 1660 :M2.81 .281(Most standard UNIX signals are provided.  Job control)J1188 1708 :M.007 .001(works as expected in shells that support it.)J1188 1806 :Mf0_41 sf(5.8. Sockets)S1188 1904 :Mf1_41 sf3.725 .372(Socket-related calls in Cygwin32 simply call the fun)J2095 1904 :M(c-)S1188 1953 :M6.022 .602(tions by the same name in Winsock, Microsoft\325s im)J2113 1953 :M(-)S1188 2001 :M2.664 .266(plementation of Berkeley sockets.  Only a few changes)J1188 2049 :M2.099 .21(were needed to match the expected UNIX semantics \321)J1188 2097 :M11.393 1.139(one of the most troublesome differences was that)J1188 2145 :M(Win)S1259 2145 :M9.588 .959(sock must be initialized before the first socket)J1188 2193 :M10.955 1.096(function is called.  As a result, Cygwin32 has to)J1188 2241 :M1.398 .14(perform this initialization when appropriate.  In order to)J1188 2289 :M3.392 .339(support sockets across )J1583 2289 :Mf3_41 sf1.111(fork)Af1_41 sf2.848 .285( calls, child processes ini-)J1188 2338 :M8.811 .881(tialize Winsock if any inherited file descriptor is a)J1188 2386 :M(socket.)S1188 2484 :M11.881 1.188(Unfortunately, implicitly loading DLLs at process)J1188 2532 :M13.972 1.397(startup is usually a slow affair.  Because many)J1188 2580 :M(pro)S1243 2580 :M1.535 .154(cesses do not use sockets, Cygwin32 explicitly loads)J1188 2628 :M6.204 .62(the Winsock DLL the first time it calls the Winsock)J1188 2676 :M(in)S1220 2676 :M2.39 .239(itialization routine.  This single change sped up GNU)J1188 2724 :M.007 .001(configure times by thirty percent.)Jendp%%PageTrailer%%Page: 6 6%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 6 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf0_41 sf(5.9. Select)S175 307 :Mf1_41 sf2.883 .288(The UNIX )Jf3_41 sf1.322(select)A524 307 :Mf1_41 sf4.75 .475( function is another call that does)J175 355 :M1.535 .153(not map cleanly on top of the Win32 API.  Much to our)J175 403 :M7.861 .786(dismay, we discovered that the Win32 )Jf3_41 sf3.523(select)A1055 403 :Mf1_41 sf13.023 1.302( in)J175 452 :M4.966 .497(Winsock only worked on socket handles.  Our impl)J1082 452 :M(e-)S175 500 :M4.784 .478(mentation allows )J485 500 :Mf3_41 sf.012(select)A633 500 :Mf1_41 sf5.297 .53( to function normally when)J175 548 :M2.912 .291(given different types of file descriptors \(sockets, pipes,)J175 596 :M14.634 1.463(handles, and a custom )J637 596 :Mf3_41 sf(/)S662 596 :M.011(dev/windows)A933 596 :Mf1_41 sf13.143 1.314( windows)J175 644 :M(mes)S241 644 :M(sages pseudo-device\).)S175 742 :M3.004 .3(Upon entry into the )Jf3_41 sf1.611(select)A679 742 :Mf1_41 sf4.071 .407( function, the first oper)J1082 742 :M(a-)S175 790 :M8.455 .846(tion is to sort the file descriptors into the different)J175 838 :M2.907 .291(types.  There are then two cases to consider.  The si)J1068 838 :M(m)S1100 838 :M(-)S175 887 :M1.019 .102(ple case is when at least one file descriptor is a type that)J175 935 :M4.509 .451(is always known to be ready \(such as a disk file\).  In)J175 983 :M3.314 .331(that case, )Jf3_41 sf1.863(select)A505 983 :Mf1_41 sf6.304 .63( returns immediately as soon as it)J175 1031 :M6.682 .668(has polled each of the other types to see if they are)J175 1079 :M6.593 .659(ready.  The more complex case involves waiting for)J175 1127 :M7.828 .783(socket or pipe file descriptors to be ready.  This is)J175 1175 :M9.089 .909(accomplished by the main thread suspending itself,)J175 1223 :M2.758 .276(after starting one thread for each type of file descriptor)J175 1271 :M(pres)S243 1271 :M6.897 .69(ent.  Each thread polls the file descriptors of its)J175 1320 :M(respe)S262 1320 :M6.217 .622(ctive type with the appropriate Win32 API call.)J175 1368 :M4.855 .486(As soon as a thread identifies a ready descriptor, that)J175 1416 :M1.624 .162(thread sig)J339 1416 :M2.119 .212(nals the main thread to wake up.  This case is)J175 1464 :M5.18 .518(now the same as the first one since we know at least)J175 1512 :M9.718 .972(one descriptor is ready.  So )J717 1512 :Mf3_41 sf.012(select)A865 1512 :Mf1_41 sf8.392 .839( returns, after)J175 1560 :M.005 .001(polling all of the file descriptors one last time.)J175 1665 :Mf0_50 sf(6. Performance)S175 1766 :Mf1_41 sf5.042 .504(Early on in the development process, correctness was)J175 1814 :M9.418 .942(almost the entire emphasis.  As Cygwin32 became)J175 1862 :M2.805 .281(more complete, performance became a much important)J175 1910 :M4.608 .461(issue.  We knew that the tools ran much more slowly)J175 1958 :M5.216 .522(under Win32 than under )J618 1958 :M4.974 .497(Linux on the same machine,)J175 2007 :M5.593 .559(but it was not clear at all whether to attribute this to)J175 2055 :M2.439 .244(differences in the operating systems or to inefficiencies)J175 2103 :M(in Cygwin32.)S175 2201 :M8.524 .852(The lack of a working profiler has made analyzing)J175 2249 :M9.465 .947(Cygwin32\325s performance particularly difficult.  A)J1088 2249 :M(l-)S175 2297 :M4.261 .426(though the latest version of the library includes \322real\323)J175 2345 :M3.737 .374(itimer support, we have not yet found a way to impl)J1082 2345 :M(e-)S175 2393 :M4.117 .412(ment virtual )J398 2393 :M4.358 .436(itimers.  This is the most reliable way of)J175 2441 :M2.094 .209(obtaining profiling data since concurrently running pro-)J175 2490 :M4.024 .402(cesses aren\325t likely to skew the results.  We will soon)J175 2538 :M4.318 .432(have a combination of the gcc compiler and the GNU)J175 2586 :M5.652 .565(profile analysis tool )J540 2586 :M5.416 .542(gprof working with \322real\323 itimer)J175 2634 :M9.29 .929(support which will help a great deal in optimizing)J175 2682 :M(Cygwin32.)S175 2780 :M1.14 .114(Even without a profiler, we knew of several areas inside)J175 2828 :M10.185 1.018(Cygwin32 that definitely needed a fresh approach.)J1188 209 :M4.203 .42(While we rewrote those sections of code, we used the)J1188 257 :M3.503 .35(speed of configuring the tools under Win32 as the pri-)J1188 305 :M8.273 .827(mary performance measurement.  This choice made)J1188 353 :M3.217 .322(sense because we knew process creation speed was es-)J1188 402 :M12.576 1.258(pecially poor, something that the GNU configure)J1188 450 :M.031 .003(process stresses.)J1188 548 :M9.036 .904(These performance adjustments made it possible to)J1188 596 :M4.331 .433(completely configure the development tools under NT)J1188 644 :M5.292 .529(with Cygwin32 in only ten minutes and complete the)J1188 692 :M3.555 .355(build in just under an hour on a dual Pentium Pro 200)J1188 740 :M1.629 .163(system with 128 MB of RAM.  This is reasonably co)J2081 740 :M(m)S2113 740 :M(-)S1188 788 :M2.547 .255(petitive with the time taken to complete this task under)J1188 837 :M3.41 .341(a typical flavor of the UNIX operating system running)J1188 885 :M(on an identical machine.)S1188 989 :Mf0_50 sf.02 .002(7. Ported Software)J1188 1090 :Mf1_41 sf5.249 .525(In addition to being able to configure and build most)J1188 1139 :M3.139 .314(GNU software, several other significant packages have)J1188 1187 :M5.549 .555(been successfully ported to the Win32 host using the)J1188 1235 :M5.028 .503(Cygwin32 library.  Following is a list of some of the)J1188 1283 :M2.121 .212(more interesting ones \(most are not included in the free)J1188 1331 :M.019 .002(Internet distributions\):)J1188 1429 :Mf4_41 sf6.979(\267)Af5_41 sf4.215 .422( )J1263 1429 :Mf1_41 sf6.342 .634(X11R6 client libraries, enabling porting many X)J1263 1477 :M8.111 .811(programs to the existing free Win32 X servers.)J1263 1525 :M8.767 .877(Examples of successfully ported X applications)J1263 1574 :M(in)S1295 1574 :M(clude xterm, ghostview, xfig, and )S1855 1574 :M(xconq.)S1188 1672 :Mf4_41 sf(\267)Sf5_41 sf( )S1263 1672 :Mf1_41 sf(xemacs and vim editors.)S1188 1770 :Mf4_41 sf9.298(\267)Af5_41 sf5.616 .562( )J1263 1770 :Mf1_41 sf11.495 1.15(GNU )J1377 1770 :M9.785 .978(inetutils.  It is possible to run the inetd)J1263 1818 :M(da)S1302 1818 :M1.322 .132(emon as a Windows NT service to enable UNIX-)J1263 1866 :M4.073 .407(style networking, using a custom NT login binary)J1263 1914 :M6.363 .636(to allow remote logins with full user authentica-)J1263 1962 :M13.518 1.352(tion.  One can achieve similar results under)J1263 2010 :M(Win)S1334 2010 :M14.301 1.43(dows 95/98 by running )J1812 2010 :M14.537 1.454(inetd out of the)J1263 2058 :Mf3_41 sf(aut)S1337 2058 :M(o)S1362 2058 :M.012(exec.bat)A1559 2058 :Mf1_41 sf5.961 .596( file, providing a custom 95/98-)J1263 2107 :M(tailored login binary.)S1188 2205 :Mf4_41 sf4.913(\267)Af5_41 sf2.968 .297( )J1263 2205 :Mf1_41 sf4.114 .411(KerbNet, Cygnus\325 implementation of the kerberos)J1263 2253 :M(security system.)S1188 2351 :Mf4_41 sf12.493(\267)Af5_41 sf7.546 .755( )J1263 2351 :Mf1_41 sf10.905 1.09(CVS \(Concurrent Versions System\), a popular)J1263 2399 :M(ve)S1302 2399 :M(r)S1316 2399 :M6.022 .602(sion control program based on RCS.  Cygnus)J1263 2447 :M5.932 .593(uses a kerberos-enabled version of )J1890 2447 :M6.428 .643(CVS to grant)J1263 2495 :M10.519 1.052(secure access to our source code to local and)J1263 2543 :M(remote engineers.)S1188 2641 :Mf4_41 sf9.891(\267)Af5_41 sf5.974 .597( )J1263 2641 :Mf1_41 sf10.582 1.058(ncurses, a library that can be used to build a)J1263 2690 :M(fun)S1318 2690 :M.007 .001(ctioning version of the pager \322less\323.)J1188 2788 :Mf4_41 sf(\267)Sf5_41 sf( )S1263 2788 :Mf1_41 sf.011 .001(ssh \(secure shell\) client and server.)Jendp%%PageTrailer%%Page: 7 7%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 7 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf4_41 sf(\267)Sf5_41 sf( )S250 209 :Mf1_41 sf(PERL 5 scripting language.)S175 307 :Mf4_41 sf1.147(\267)Af5_41 sf.693 .069( )J250 307 :Mf1_41 sf1.248 .125(The bash, tcsh, ash, and )J660 307 :M1.186 .119(zsh shells.  Full job control)J250 355 :M.005 .001(is available in shells that support it.)J175 453 :Mf4_41 sf10.692(\267)Af5_41 sf6.458 .646( )J250 453 :Mf1_41 sf9.232 .923(Apache web server \(some source-level changes)J250 502 :M.023 .002(were necessary\).)J175 600 :Mf4_41 sf7.048(\267)Af5_41 sf4.257 .426( )J250 600 :Mf1_41 sf7.712 .771(TCL/TK 8; also )J555 600 :M8.074 .807(tix, )J631 600 :M6.96 .696(itcl, and expect.  \(TCL/TK)J250 648 :M.009 .001(needed non-trivial configuration changes\).)J175 746 :M2.957 .296(Typically, the only necessary source code modification)J175 794 :M10.27 1.027(involves specifying binary mode to )Jf3_41 sf3.647(open)Af1_41 sf6.873 .687( calls as)J175 842 :M(ap)S214 842 :M2.864 .286(propriate.  Because our Win32 compiler always gen-)J175 890 :M(er)S207 890 :M1.657 .166(ates executables that end in the standard )Jf3_41 sf.683(.exe)Af1_41 sf1.897 .19( suffix,)J175 938 :M3.923 .392(it is also often necessary to make minor modifications)J175 987 :M5.044 .504(to makefiles so that make will expect the newly built)J175 1035 :M(ex)S214 1035 :M(ecutables to end with the suffix.)S175 1139 :Mf0_50 sf.015 .002(8. Future Work)J175 1240 :Mf1_41 sf4.623 .462(Standards conformance is becoming a more important)J175 1289 :M3.135 .313(focus.  In the last release, all POSIX.1/90)J889 1268 :Mf1_29 sf.504 .05( )Jf1_41 sf0 21 rm4.666 .467(calls are im)J0 -21 rm1100 1289 :M(-)S175 1337 :M3.863 .386(plemented except for )Jf3_41 sf1.632(mkfifo)A707 1337 :Mf1_41 sf7.716 .772( and )J806 1337 :Mf3_41 sf.012(setuid)A954 1337 :Mf1_41 sf5.459 .546(. X/Open)J175 1391 :M4.984 .498(Release 4)J342 1370 :Mf1_29 sf(4)S356 1391 :Mf1_41 sf5.706 .571( conformance may be a desirable goal, but)J175 1443 :M1.346 .135(we have not pursued this yet.  While the current version)J175 1491 :M8.512 .851(of the library passes most of the NIST POSIX test)J175 1545 :M(suite)S252 1524 :Mf1_29 sf(5)S266 1545 :Mf1_41 sf1.333 .133( with flying colors, it performs poorly with respect)J175 1597 :M2.395 .239(to mimicking the UNIX security model, so there is still)J175 1645 :M2.852 .285(room for improvement.  When we consider how to i)J1068 1645 :M(m)S1100 1645 :M(-)S175 1693 :M5.97 .597(plement the )J397 1693 :Mf3_41 sf.012(setuid)A545 1693 :Mf1_41 sf5.648 .565( functionality, we will also look)J175 1741 :M6.094 .609(into a secure alternative to the library\325s usage of the)J175 1789 :M(shared memory areas.)S175 1887 :M6.732 .673(Cygwin32 does not yet support applications that use)J175 1935 :M9.529 .953(multiple Windows threads, even though the library)J175 1983 :M9.043 .904(itself is multi-threaded.  We expect to address this)J175 2031 :M(shor)S246 2031 :M2.213 .221(tcoming through the use of locks at strategic points)J175 2080 :M5.05 .505(in the DLL.  It would also be desirable to implement)J175 2128 :M(sup)S232 2128 :M.02 .002(port for POSIX threads.)J175 2226 :M11.079 1.108(Although Cygwin32 allows the GNU development)J175 2274 :M5.447 .545(tools that depend heavily on UNIX semantics to su)J1081 2274 :M(c-)S175 2322 :M2.379 .238(cessfully run on Win32 hosts, it is not always desirable)J175 2370 :M2.365 .236(to use it.  A program using a perfect imple)J902 2370 :M1.653 .165(mentation of)J175 2418 :M7.996 .8(the library would still incur a noticeable amount of)J175 2466 :M6.718 .672(overhead.  As a result, an important future direction)J175 2515 :M15.933 1.593(involves modifying the compiler so that it can)J175 2563 :M(option)S280 2563 :M7.195 .719(ally link against the Microsoft DLLs that ship)J175 2611 :M16.769 1.677(with both Win32 operating systems, instead of)J175 2659 :M7.923 .792(Cygwin32.  This will give developers the ability to)J175 2707 :M9.66 .966(choose whether or not to use Cygwin32 on a per-)J175 2755 :M(program basis.)S1188 216 :Mf0_50 sf.019 .002(9. Proprietary Alternatives)J1188 317 :Mf1_41 sf3.326 .333(When we started developing Cygwin32, alternatives to)J1188 365 :M2.684 .268(writing our own library either did not exist or were not)J1188 413 :M4.652 .465(mature enough for our purposes.  Today, we know of)J1188 461 :M1.634 .163(three proprietary alternatives to Cygwin32: UWIN from)J1188 509 :M2.989 .299(AT&T Laboratories, )J1549 509 :M2.891 .289(NuTCracker from DataFocus, and)J1188 557 :M(OpenNT from )S1432 557 :M.023 .002(Softway Systems.)J1188 662 :M(UWIN)S1300 641 :Mf1_29 sf(6)S1314 662 :Mf1_41 sf10.954 1.095( \(\322UNIX for Windows\323\) was developed by)J1188 713 :M7.449 .745(David Korn for AT&T Laboratories. Its architecture)J1188 761 :M3.703 .37(and API appears to be quite similar to our library.  Its)J1188 810 :M2.289 .229(single biggest advantage over Cygwin32 is probably its)J1188 858 :M5.526 .553(more complete support for the UNIX security model.)J1188 906 :M5.219 .522(UWIN binaries are available for free non-commercial)J1188 954 :M(use, but its source code is not available.)S1188 1052 :M13.188 1.319(NuTCracker, by )J1510 1052 :M10.854 1.085(DataFocus, is another proprietary)J1188 1100 :M6.126 .613(product that is built on top of the Win32 subsystem.)J1188 1148 :M1.2 .12(Version 4.0 of the product appears to be quite complete,)J1188 1196 :M.013 .001(including such features as support for POSIX threads.)J1188 1301 :M3.607 .361(OpenNT from )J1443 1301 :M2.347 .235(Softway Systems)J1733 1280 :Mf1_29 sf(7)S1747 1301 :Mf1_41 sf3.719 .372( takes a markedly dif)J2113 1301 :M(-)S1188 1352 :M7.466 .747(ferent approach by providing a capable POSIX sub-)J1188 1400 :M(sys)S1240 1400 :M15.776 1.578(tem for Windows NT, implemented with the)J1188 1448 :M5.828 .583(Windows NT source code close at hand.  At least in)J1188 1497 :M4.635 .464(principle, writing a separate POSIX subsystem should)J1188 1545 :M8.94 .894(result in better performance because of the lack of)J1188 1593 :M3.304 .33(overhead imposed when implementing a library on top)J1188 1641 :M3.365 .336(of the Win32 subsystem.  More importantly, by avoid-)J1188 1689 :M1.579 .158(ing the compromises inherent in supporting both Win32)J1188 1737 :M2.854 .285(and POSIX calls in one application, it should be possi-)J1188 1785 :M1.56 .156(ble for OpenNT to conform more strictly to the relevant)J1188 1833 :M(sta)S1234 1833 :M(n)S1255 1833 :M(dards.)S1188 1931 :M13.249 1.325(However, there are two substantial drawbacks to)J1188 1980 :M2.965 .297(OpenNT\325s approach.  The first is that it is not possible)J1188 2028 :M1.557 .156(to mix UNIX and Win32 API calls in one application, a)J1188 2076 :M3.205 .32(feature that is highly desirable if you are attempting to)J1188 2124 :M2.74 .274(do a full native Win32 port of a UNIX program gradu)J2113 2124 :M(-)S1188 2172 :M5.727 .573(ally, one module at a time.  The second drawback is)J1188 2220 :M8.713 .871(that )J1272 2220 :M7.254 .725(OpenNT does not and cannot support Windows)J1188 2268 :M4.807 .481(95/98, a requirement for many applications, including)J1188 2316 :M.01 .001(the GNUPro development tools.)J1188 2415 :M1.255 .126(The lack of source code, coupled with the licensing fees)J1188 2463 :M8.225 .822(associated with each of these commercial offerings,)J1188 2511 :M6.163 .616(might still have required us to have written our own)J1188 2559 :M6.32 .632(library if we were faced with the same porting chal-)J1188 2607 :M(lenge today.)S1188 2712 :Mf0_50 sf.027 .003(10. Summary and Conclusions)J1188 2813 :Mf1_41 sf4.017 .402(Cygwin32 is a UNIX-compatibility library that can be)J1188 2861 :M5.947 .595(used to port UNIX software to Win32 operating sys)J2113 2861 :M(-)Sendp%%PageTrailer%%Page: 8 8%%BeginPageSetupinitializepage(tformaro; document: Microsoft Word - FINAL.DOC; page: 8 of 8)setjob%%EndPageSetupgS 0 0 2300 3042 rC175 209 :Mf1_41 sf4.552 .455(tems.  In this paper, I have examined our motivations)J175 257 :M2.957 .296(for writing Cygwin32.  I have analyzed its architecture)J175 305 :M7.324 .732(in some detail, paying extra attention to those areas)J175 353 :M3.397 .34(where UNIX and Win32 differ the most.  I have listed)J175 402 :M4.696 .47(examples of successfully ported software and touched)J175 450 :M8.039 .804(on performance issues.  I have discussed where we)J175 498 :M(ex)S214 498 :M3.27 .327(pect to take Cygwin32 in the future.  Finally, I have)J175 546 :M.009 .001(described the proprietary alternatives to our library.)J175 644 :M6.318 .632(As you can see from the list of ported software pr)J1082 644 :M(e-)S175 692 :M4.923 .492(sented earlier in this paper, Cygwin32 can be used to)J175 740 :M10.784 1.078(facilitate greatly the process of porting significant)J175 788 :M3.291 .329(UNIX applications to Win32 hosts.  For some applica-)J175 837 :M8.005 .8(tions, it may be desirable to invest in a true native)J175 885 :M5.15 .515(Win32 port in order to remove the overhead imposed)J175 933 :M4.096 .41(by Cygwin32.  However, the increased portability and)J175 981 :M10.305 1.031(time saved by using Cygwin32 should make it an)J175 1029 :M(attractive option in many situations.)S175 1134 :Mf0_50 sf(11. Availability)S175 1235 :Mf1_41 sf4.037 .404(Please consult our project WWW page to obtain more)J175 1283 :M4.542 .454(information about Cygwin32, including how to down)J1100 1283 :M(-)S175 1331 :M.005 0(load the latest source code and binary release:)J294 1429 :Mf0_41 sf.005(http://www.cygnus.com/misc/gnu-win32)A175 1527 :Mf1_41 sf3.995 .4(For more information about the GNUPro development)J175 1575 :M(tools, please visit:)S247 1674 :Mf0_41 sf.005(http://www.cygnus.com/product/gnupro.html)A175 1778 :Mf0_50 sf.038 .004(12. Acknowledgements)J175 1879 :Mf1_41 sf2.621 .262(The author wishes to thank the many other people who)J175 1927 :M13.573 1.357(have helped write Cygwin32, in particular Steve)J175 1976 :M(Cham)S273 1976 :M2.962 .296(berlain who wrote the original implementation of)J175 2024 :M4.284 .428(the library.  Jeremy Allison, Doug Evans, Christopher)J175 2072 :M15.384 1.538(Faylor, Philippe Giacinti, Tim )J788 2072 :M11.234 1.123(Newsham, Sergey)J175 2120 :M(O)S205 2120 :M(k)S226 2120 :M7.858 .786(hapkin, and Ian Taylor have all made significant)J175 2168 :M1.496 .15(contributions to the library.  The author also appreciates)J175 2216 :M6.869 .687(the feedback and proofreading help given to him by)J175 2264 :M21.942 2.194(Eric )J285 2264 :M18.611 1.861(Bachalo, Chip )J592 2264 :M13.363 1.336(Chapin, Christopher Faylor,)J175 2312 :M3.181 .318(Kathleen Jones, Robert Richardson, Stan Shebs, Sonya)J175 2361 :M3.151 .315(Smallets, and Ethan Solomita, as well as from Stephan)J175 2409 :M.012 .001(Walli, his USENIX paper advisor.)J175 2513 :Mf0_50 sf(13. Trademarks)S175 2615 :Mf1_41 sf1.818 .182(GNUPro is a registered trademark of Cygnus Solutions.)J175 2663 :M11.537 1.154(Windows NT, Windows 95, Windows 98, Win32,)J175 2711 :M15.778 1.578(Windows, and Visual C++ are either registered)J175 2759 :M(trad)S239 2759 :M4.883 .488(emarks or trademarks of Microsoft Corporation in)J175 2807 :M6.297 .63(the United States and/or other countries.  UNIX is a)J175 2855 :M(trad)S239 2855 :M2.654 .265(emark of the Open Group.  OpenNT is a trademark)J1188 209 :M5.874 .587(of Softway Systems.  All other trademarks belong to)J1188 257 :M(their respective holders.)S1188 460 :Mf1_50 sf(                              )S1548 460 :M(                    )S1188 448 600 2 rF1188 497 :Mf1_29 sf(1)S1202 518 :Mf1_41 sf( DJ )S1289 518 :M.012 .001(Delorie: The DJGPP Project.  Available from)J1188 569 :M(http://www.delorie.com/djgpp.)S1188 603 :Mf1_29 sf(2)S1202 624 :Mf1_41 sf.01 .001( ISO/IEC 9945-1:1996.  \(ANSI/IEEE Std 1003.1, 1996)J1188 675 :M(Edition\) )S1333 675 :M.013 .001(\321 POSIX Part 1: System Application Program)J1188 723 :M.017 .002(Interface \(API\) [C Language].)J1188 757 :Mf1_29 sf(3)S1202 778 :Mf1_41 sf.007 .001( ISO/IEC 9899:1990, Programming Languages \321 C.)J1188 814 :Mf1_29 sf(4)S1202 835 :Mf1_41 sf.007 .001( The X/Open Release 4 CAE Specification, System)J1188 887 :M.01 .001(Interfaces and Headers, Issue 4, Vol. 2, X/Open Co,)J1188 935 :M(Ltd., 1994.)S1188 968 :Mf1_29 sf(5)S1202 989 :Mf1_41 sf.012 .001( NIST POSIX test suite.  Available from)J1188 1040 :M.001(http://www.itl.nist.gov/div897/ctg/posix_form.htm.)A1188 1074 :Mf1_29 sf(6)S1202 1095 :Mf1_41 sf.011 .001( Korn, David G.  UWIN \321 UNIX for Windows.)J1188 1146 :M(Pro)S1245 1146 :M.009 .001(ceedings of the 1997 USENIX Windows NT Annual)J1188 1194 :M(Technical Conference.)S1188 1228 :Mf1_29 sf(7)S1202 1249 :Mf1_41 sf.007 .001( Walli, Stephen R.  OpenNT: UNIX Application)J1188 1300 :M(Por)S1245 1300 :M.005 .001(tability to Windows NT via an Alternative)J1188 1348 :M.007 .001(Environment Subsystem.  Proceedings of the 1997)J1188 1397 :M.029 .003(USENIX Wi)J1399 1397 :M(n)S1420 1397 :M.013 .001(dows NT Workshop Proceedings.)Jendp%%PageTrailer%%Trailerend%%EOF