#!/usr/bin/perl
# -*- perl -*-

$full_days = 14;	# days that full listing shows up on "new" page
$new_days = 30;		# days that any listing shows up on "new" page
$min_new = 10;		# minimum number if "new" items

$id = "000001";
open(A, "article.db");
while (<A>) {
    $line++;
    last if /#END/;
    next if /^#/;
    if (/^(\S[^:]*):\s*(.*)/) {
	($tag, $text) = ($1,$2);
	$tag =~ tr/A-Z/a-z/;
	$tag =~ s/[ \t]//g;
	$text =~ s/[ \t\r\n]+$//;
	$text =~ s/[ \t]+/ /g;
	$text{"$id.$tag"} = $text;
	$valid_ids{$id} = 1;

	if ($tag eq "date" && $text !~ /^\d\d\d\d-\d\d-\d\d/) {
	    print "Invalid date $text, expect yyyy-mm-dd\n";
	    exit(1);
	}
	if ($tag eq "email" && $text !~ /@.*\./) {
	    print "Invalid email $text\n";
	    exit(1);
	}
	if ($tag eq "type" && $text !~ /^(news|software)$/i) {
	    print "Unsupported type $text (want news or software)\n";
	    exit(1);
	}

    } elsif (/^\s+(\S.*)/) {
	$text = $1;
	$text =~ s/[ \t\r\n]+$//;
	$text =~ s/[ \t]+/ /g;
	$text{"$id.$tag"} .= " $text";
    } elsif (! /\S/ && $tag) {
	$tag = undef;
	$id++;
    } elsif (! /\S/) {
    } else {
	print "Indecipherable line $line: $_\n";
	exit(1);
    }
}

# for $k (sort keys %text) {
#     print "$k = $text{$k}\n";
# }

$full_cutoff = &days_ago($full_days);
$new_cutoff = &days_ago($new_days);

sub days_ago {
    my($days) = @_;
    my ($d,$m,$y) = (localtime(time-86400*$days))[3,4,5];
    $m ++;
    $y += 1900;
    return sprintf("%04d-%02d-%02d", $y, $m, $d);
}
$ids = join(',', sort keys %valid_ids);

&extract_listings("news", "date");
&extract_listings("software", "title");

sub extract_listings {
    my ($which, $sortby) = @_;
    @list = ();
    for $id (keys %valid_ids) {
	if ($text{"$id.type"} =~ /^$which$/i) {
	    $date = $text{"$id.date"};
	    push(@list, "$date $id");
	}
    }

    open(NEW, ">$which-new.html");
    $commit{"$which-new.html"} = 1;
    @list = reverse sort @list;
    for ($i=0; $i<=$#list; $i++) {
	($date, $id) = split(' ', $list[$i]);
	$text{"$id.udate"} = &user_date($date);
	if ($date ge $full_cutoff) {
	    $t = '<a href="$url"><b>$title</b></a><small><br>$text <i>$udate, <a href="mailto:$email">$author</a></i></p></small>';
	} elsif ($date ge $new_cutoff || $i < $min_new) {
	    $t = '<a href="$url"><b>$title</b></a><small> <i>$udate, <a href="mailto:$email">$author</a></i></p></small>';
	} else {
	    $t = '';
	}
	if ($t) {
	    $t =~ s/\$([a-z]+)/$text{"$id.$1"}/ge;
	    print NEW "$t\n";
	}
    }
    close NEW;

    @list = ();
    for $id (keys %valid_ids) {
	if ($text{"$id.type"} =~ /^$which$/i) {
	    $key = $text{"$id.$sortby"};
	    $key =~ tr/A-Z/a-z/;
	    $key =~ s/(\d+)/sprintf("%09d", $1)/ge;
	    $key =~ s/[^a-z0-9]+/ /g;
	    push(@list, "$key\0$id");
	}
    }
    if ($sortby =~ /date/) {
	@list = reverse sort @list;
	$t = '<dt><a href="$url"><b>$title</b></a> - <small>$udate, <a href="mailto:$email">$author</a></small><dd>$text';
    } else {
	@list = sort @list;
	$t = '<a href="$url"><b>$title</b></a><br>';
    }
    open(FULL, ">$which-full.html");
    $commit{"$which-full.html"} = 1;
    for ($i=0; $i<=$#list; $i++) {
	($key, $id) = split(/\0/, $list[$i]);
	$text{"$id.udate"} = &user_date($text{"$id.date"});
	$t2 = $t;
	$t2 =~ s/\$([a-z]+)/$text{"$id.$1"}/ge;
	print FULL "$t2\n";
    }
    close(FULL);
    
}

sub user_date {
    my ($y,$m,$d) = split('-', $_[0]);
    return sprintf("%s %d %d",
	       substr("JanFebMarAprMayJunJulAugSepOctNovDec", $m*3-3, 3),
		   $d, $y);
}

print "cvs commit ", join(' ', sort keys %commit), "\n";
